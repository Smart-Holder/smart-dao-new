import { ReactElement, useEffect, useState } from 'react';
import Head from 'next/head';
import { Layout } from 'antd';

import Header from '@/components/header';
import Sider from '@/components/sider/dashboardSider';
import SiderVisitor from '@/components/sider/dashboardSiderVisitor';
import Footer from '@/components/footer';

import { getSessionStorage } from '@/utils';
// import sdk from 'hcstore/sdk';
import { useAppSelector, useAppDispatch } from '@/store/hooks';
import {
  setCurrentDAO,
  setCurrentMember,
  setDAOType,
  setUserMembers,
} from '@/store/features/daoSlice';
import { useRouter } from 'next/router';
import { request } from '@/api';
import { DAOType } from '@/config/enum';

// const Header = dynamic(() => import('@/components/header'), { ssr: false });

const { Content } = Layout;

export default function BasicLayout({
  children,
  footer = true,
}: {
  children: ReactElement;
  footer?: boolean;
}) {
  const dispatch = useAppDispatch();
  const { address, chainId, isSupportChain } = useAppSelector(
    (store) => store.wallet,
  );
  const { currentDAO, currentMember, daoType } = useAppSelector(
    (store) => store.dao,
  );
  const router = useRouter();
  const [init, setInit] = useState(false);

  useEffect(() => {
    const initData = async () => {
      const dao = getSessionStorage('currentDAO');
      let type = localStorage.getItem('daoType');

      if (!dao || !dao.address) {
        router.push('/');
        return;
      }

      dispatch(setCurrentDAO(dao));

      if (type && Object.values(DAOType).includes(type as DAOType)) {
        dispatch(setDAOType(type as DAOType));
      }

      if (type === DAOType.Join) {
        const members = await request({
          name: 'utils',
          method: 'getMembersFrom',
          params: { chain: chainId, host: dao.host, owner: address },
        });

        if (members && members.length > 0) {
          dispatch(setUserMembers(members));
          dispatch(setCurrentMember(members[0]));
        }
      }

      setInit(true);
    };

    initData();
  }, []);

  // 切换地址或网络
  useEffect(() => {
    if (!init) {
      return;
    }

    const getDAOAndMember = async () => {
      const daos = await request({
        name: 'utils',
        method: 'getDAOsFromOwner',
        params: { chain: chainId, owner: address },
      });

      if (!daos || daos.length === 0) {
        router.push('/');
        return;
      }

      const dao = daos.find((item: any) => item.host === currentDAO.host);

      if (!dao) {
        router.push('/');
        return;
      }

      dispatch(setCurrentDAO(dao));
      dispatch(setDAOType(DAOType.Join));

      const members = await request({
        name: 'utils',
        method: 'getMembersFrom',
        params: { chain: chainId, host: dao.host, owner: address },
      });

      if (members && members.length > 0) {
        dispatch(setUserMembers(members));
        dispatch(setCurrentMember(members[0]));
      } else {
        dispatch(setUserMembers([]));
        dispatch(setCurrentMember({ name: '' }));
      }
    };

    if (address && chainId) {
      if (isSupportChain) {
        getDAOAndMember();
      } else {
        router.push('/');
      }
    }
  }, [address, chainId, isSupportChain]);

  // useEffect(() => {
  //   const onDAOChange = async () => {
  //     console.log('onDAOChange', currentDAO);
  //     const members = await sdk.utils.methods.getMembersFrom({
  //       chain: chainId,
  //       host: currentDAO.host,
  //       owner: address,
  //     });

  //     if (members && members.length > 0) {
  //       dispatch(setUserMembers(members));
  //       dispatch(setCurrentMember(members[0]));
  //     } else {
  //       dispatch(setUserMembers([]));
  //       dispatch(setCurrentMember({ name: '' }));
  //     }
  //   };

  //   if (currentDAO?.host) {
  //     onDAOChange();
  //   }
  // }, [currentDAO]);

  // useEffect(() => {
  //   console.log('????');
  //   dispatch(setSearchText(''));
  // }, [router]);

  // useEffect(() => {
  //   if (currentMember) {

  //   }
  // }, [currentMember]);

  if (!init) {
    return null;
  }

  console.log('daoType', daoType);

  return (
    <>
      <Head>
        <title>Smart DAO</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/icon.png" />
      </Head>
      <Layout>
        <Header />
        <Layout hasSider>
          {daoType === DAOType.Join && <Sider />}
          {(daoType === DAOType.Visit || daoType === DAOType.Follow) && (
            <SiderVisitor />
          )}
          <Layout>
            <Content className="dashboard">{children}</Content>
            {footer && <Footer hasSider />}
          </Layout>
        </Layout>
      </Layout>
    </>
  );
}
